{"cells":[{"cell_type":"markdown","id":"a6fdf0d2","metadata":{"id":"a6fdf0d2"},"source":["# üìä Task 4: Business Problem Solving using Linear Programming and PuLP"]},{"cell_type":"markdown","id":"70d55906","metadata":{"id":"70d55906"},"source":["\n","This notebook demonstrates how to solve a real-world business optimization problem using **Linear Programming** and the **PuLP** library in Python.\n","\n","**Problem:** A factory produces 2 products (A and B). Each product requires labor and materials. The goal is to **maximize profit** under resource constraints.\n"]},{"cell_type":"code","execution_count":null,"id":"a4fc07f8","metadata":{"id":"a4fc07f8"},"outputs":[],"source":["\n","# Install PuLP (only if not already installed)\n","!pip install pulp\n"]},{"cell_type":"code","execution_count":null,"id":"909c0e15","metadata":{"id":"909c0e15"},"outputs":[],"source":["\n","from pulp import LpMaximize, LpProblem, LpVariable, value\n"]},{"cell_type":"markdown","id":"e750e9e1","metadata":{"id":"e750e9e1"},"source":["## 1Ô∏è‚É£ Define the Optimization Model"]},{"cell_type":"code","execution_count":null,"id":"83344d50","metadata":{"id":"83344d50"},"outputs":[],"source":["\n","# Initialize the Linear Programming model\n","model = LpProblem(name=\"product-mix\", sense=LpMaximize)\n","\n","# Decision variables: number of units for Product A and B\n","x = LpVariable(name=\"Product_A\", lowBound=0, cat='Integer')\n","y = LpVariable(name=\"Product_B\", lowBound=0, cat='Integer')\n"]},{"cell_type":"markdown","id":"437c4267","metadata":{"id":"437c4267"},"source":["## 2Ô∏è‚É£ Set the Objective Function"]},{"cell_type":"code","execution_count":null,"id":"e780a0a8","metadata":{"id":"e780a0a8"},"outputs":[],"source":["\n","# Objective: Maximize profit -> $40 per unit of A, $30 per unit of B\n","model += 40 * x + 30 * y, \"Total_Profit\"\n"]},{"cell_type":"markdown","id":"3ed860b9","metadata":{"id":"3ed860b9"},"source":["## 3Ô∏è‚É£ Add Constraints"]},{"cell_type":"code","execution_count":null,"id":"ccabe9ae","metadata":{"id":"ccabe9ae"},"outputs":[],"source":["\n","# Constraints:\n","# Labor: 2 hours for A, 1 hour for B. Max 100 hours available.\n","model += (2 * x + 1 * y <= 100, \"Labor\")\n","\n","# Material: 1 unit for A, 1 unit for B. Max 80 units available.\n","model += (x + y <= 80, \"Material\")\n"]},{"cell_type":"markdown","id":"d5aae5c6","metadata":{"id":"d5aae5c6"},"source":["## 4Ô∏è‚É£ Solve the Problem"]},{"cell_type":"code","execution_count":null,"id":"69b9a281","metadata":{"id":"69b9a281"},"outputs":[],"source":["\n","model.solve()\n","print(f\"Produce {x.value()} units of Product A\")\n","print(f\"Produce {y.value()} units of Product B\")\n","print(f\"Maximum Profit: ${value(model.objective)}\")\n"]},{"cell_type":"markdown","id":"00999e0e","metadata":{"id":"00999e0e"},"source":["## 5Ô∏è‚É£ Optimization Insights"]},{"cell_type":"code","execution_count":null,"id":"d2a3c239","metadata":{"id":"d2a3c239"},"outputs":[],"source":["\n","from IPython.display import Markdown\n","\n","Markdown(f\"\"\"\n","### ‚úÖ Results Summary\n","\n","- üè≠ **Product A Units:** {int(x.value())}\n","- üè≠ **Product B Units:** {int(y.value())}\n","- üí∞ **Maximum Profit:** ${int(value(model.objective))}\n","\n","**Constraints:**\n","- üïí Max Labor: 100 hrs used\n","- üß± Max Material: 80 units used\n","\"\"\")\n"]}],"metadata":{"colab":{"provenance":[]},"language_info":{"name":"python"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"nbformat":4,"nbformat_minor":5}
